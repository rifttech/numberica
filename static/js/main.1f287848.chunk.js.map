{"version":3,"sources":["commons/DifferenceTable.js","commons/GaussianQuadrature.js","commons/utils.js","components/DataInput.js","components/ControlPoint.js","pages/Ex1.js","commons/Spline.js","pages/Ex2.js","commons/FiniteDifference.js","pages/Ex3.js","pages/Ex4.js","App.js","reportWebVitals.js","index.js"],"names":["DifferenceTable","data","this","diff","init","count","tmp","i","length","push","factorial","find","x","table","map","e","y","x0","Number","y0","q","Math","abs","result","getTable","calcQ","val","r","j","Table","integrate","fn","a","b","n","round","number","digits","d","pow","EPSILON","parse","text","split","replace","DataInput","onChange","style","width","height","fontSize","value","ControlPoint","props","cx","cy","payload","stroke","visible","fill","transform","initial","Ex1","useState","join","undefined","plot","step","origin","min","max","state","setState","className","p","target","type","onClick","array","calculate","it","dots","left","right","indexOf","prev","ResponsiveContainer","ComposedChart","margin","top","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","domain","YAxis","Tooltip","Legend","Line","name","dot","v","err","console","log","alert","Interpolate","splines","NaN","s","c","k","dx","Ex2","eq","sp","alpha","Array","beta","hi","hi1","A","C","B","F","z","Build","rs","equation","buildEquation","sign","x1","eqs","derriveInternal","i0","i1","i2","x2","derrive","Ex3","roundTo","parsedata","fx","xy","dy","rl","display","flexDirection","ceil","parser","Parser","Ex4","aeval","beval","graph","setData","marginLeft","digit","parseInt","marginTop","fnexr","argA","toUpperCase","argB","evA","evaluate","evB","func","exr","temp","raw","GQ","id","values","calc","coefs","bound","Home","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f287848.chunk.js","sourcesContent":["export default class DifferenceTable {\r\n    constructor(data) {\r\n        this.diff = [];\r\n        init(this.diff, data, 5);\r\n    }\r\n\r\n    getTable() {\r\n        return this.diff;\r\n    }\r\n}\r\n\r\n// расчет таблицы разностей\r\nfunction init(diff, data, count) {\r\n    // console.log(\"data: \" + data,\"|\", count, \"| length:\", data.length);\r\n    if (count <= 0) {\r\n        return;\r\n    }\r\n    let tmp = [];\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n        tmp.push(data[i + 1] - data[i]);\r\n    }\r\n    diff.push(tmp);\r\n    init(diff, tmp, count - 1);\r\n}\r\n\r\nlet factorial = [0, 1, 2, 6, 24, 120]\r\n\r\nfunction find(x, data) {\r\n    //инициализируем таблицу разностей\r\n    let table = new DifferenceTable(data.map(e => e.y));\r\n    //за х0 принимаем первый узел\r\n    let x0 = Number(data[0].x);\r\n    let y0 = Number(data[0].y);\r\n    let h = Math.abs(Number(data[1].x) - Number(data[0].x));\r\n    let q = (x - x0) / h\r\n    let result = y0;\r\n    // далее по формуле интерполяции вперед, рачитываем значение функции\r\n    for (let i = 0; i < 5; i++) {\r\n        result += table.getTable()[i][0] * calcQ(q, i) / factorial[i + 1];\r\n    }\r\n    return result;\r\n}\r\n\r\n// расчет коэфицента к разности\r\nfunction calcQ(val, i) {\r\n    let r = 1;\r\n    for (let j = i; j >= 0; j--) {\r\n        r *= val - j;\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport {\r\n    find\r\n}\r\n","/**\r\n * Значения коэффицентов и корней для формул Гаусса\r\n */\r\nconst Table = {\r\n    \"2\": [\r\n        [1.0, -0.577350269189626],\r\n        [1.0, 0.577350269189626]\r\n    ],\r\n    \"3\": [\r\n        [0.888888888888889, 0.000000000000000],\r\n        [0.555555555555556, -0.774596669241483],\r\n        [0.555555555555556, 0.774596669241483]\r\n    ],\r\n    \"4\": [\r\n        [0.652145154862546, -0.339981043584856],\r\n        [0.652145154862546, 0.339981043584856],\r\n        [0.347854845137454, -0.861136311594053],\r\n        [0.347854845137454, 0.861136311594053],\r\n    ],\r\n    \"5\": [\r\n        [0.568888888888889, 0.000000000000000],\r\n        [0.478628670499367, -0.538469310105683],\r\n        [0.478628670499367, 0.538469310105683],\r\n        [0.236926885056189, -0.906179845938664],\r\n        [0.236926885056189, 0.906179845938664],\r\n    ],\r\n    \"6\": [\r\n        [0.360761573048139, 0.661209386466264],\r\n        [0.360761573048139, -0.661209386466264],\r\n        [0.467913934572691, -0.238619186083197],\r\n        [0.467913934572691, 0.238619186083197],\r\n        [0.171324492379170, -0.932469514203152],\r\n        [0.171324492379170, 0.932469514203152],\r\n    ],\r\n    \"7\": [\r\n        [0.417959183673469, 0.000000000000000],\r\n        [0.381830050505119, 0.405845151377397],\r\n        [0.381830050505119, -0.405845151377397],\r\n        [0.279705391489277, -0.741531185599394],\r\n        [0.279705391489277, 0.741531185599394],\r\n        [0.129484966168870, -0.949107912342758],\r\n        [0.129484966168870, 0.949107912342758],\r\n    ]\r\n\r\n\r\n};\r\n/**\r\n * Вычисляет интеграл с помощью квадратур гаусса\r\n * @param {Function} fn функция\r\n * @param {Number} a левая граница\r\n * @param {Number} b правая граница\r\n * @param {Number} n количество точек\r\n * @returns \r\n */\r\nfunction integrate(fn, a, b, n) {\r\n    let result = 0;\r\n    const q = Table[n];\r\n    for (let i = 0; i < n; i++) {\r\n        let w = q[i][0]\r\n        let z = q[i][1]\r\n        result += w * fn(((b - a) * z + b + a) / 2)\r\n    }\r\n    return result * ((b - a) / 2);\r\n}\r\n\r\n/**\r\n * Округляет число до конректного знака после запятой\r\n * @param {Number} number число\r\n * @param {Number} digits количество знаков после запятой\r\n * @returns \r\n */\r\nfunction round(number, digits) {\r\n    if (digits === 0) {\r\n        return number;\r\n    }\r\n    let d = Math.pow(10, digits);\r\n    return Math.round((number + Number.EPSILON) * d) / d\r\n}\r\n\r\n\r\nexport {\r\n    Table,\r\n    integrate,\r\n    round,\r\n}","function parse(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n\r\n            return { x: val[0], y: val[1] }\r\n        })\r\n}\r\n\r\n\r\n/**\r\n * Округляет число до конректного знака после запятой\r\n * @param {Number} number число\r\n * @param {Number} digits количество знаков после запятой\r\n * @returns \r\n */\r\nfunction round(number, digits) {\r\n    if (digits === 0) {\r\n        return number;\r\n    }\r\n    let d = Math.pow(10, digits);\r\n    return Math.round((number + Number.EPSILON) * d) / d\r\n}\r\n\r\nexport {\r\n    parse,\r\n    round\r\n}","import React from \"react\"\r\n\r\nexport default function DataInput({ text, onChange }) {\r\n    return (\r\n        <textarea\r\n            style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n            value={text}\r\n            onChange={(e) => onChange(e)} />\r\n    )\r\n}\r\n","// кастомная точка на графике, работает по visible=true \r\nconst ControlPoint = (props) => {\r\n    const { cx, cy, stroke, payload, value } = props;\r\n    if (payload.visible) {\r\n        return (\r\n            <svg x={cx - 4} y={cy - 4} width={8} height={8} fill=\"white\">\r\n                <g transform=\"translate(4 4)\">\r\n                    <circle r=\"4\" fill=\"black\" />\r\n                    <circle r=\"2\" fill=\"white\" />\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default ControlPoint","import React, { useState } from \"react\";\r\nimport { find } from \"../commons/DifferenceTable\";\r\nimport { round } from \"../commons/GaussianQuadrature\";\r\nimport { parse } from \"../commons/utils\";\r\nimport DataInput from \"../components/DataInput\";\r\nimport ControlPoint from \"../components/ControlPoint\";\r\nimport { LineChart, ComposedChart, Scatter, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nconst initial = {\r\n    data: [\r\n        \"10;0.17365\",\r\n        \"20;0.34202\",\r\n        \"30;0.5\",\r\n        \"40;0.64279\",\r\n        \"50;0.76604\",\r\n        \"60;0.86603\"\r\n    ],\r\n    value: 23\r\n}\r\n\r\nexport default function Ex1() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: undefined,\r\n        value: 23,\r\n        plot: {\r\n            data: [],\r\n            step: 100,\r\n            origin: [],\r\n            min: 0,\r\n            max: 70\r\n        }\r\n    });\r\n\r\n    return (<>\r\n        <h1>1. Интерполяция</h1>\r\n        <h2>Метод разделенных разностей</h2>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <DataInput text={state.text} onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n                <div>\r\n                    <label>\r\n                        f(\r\n                        <input type='text' value={state.value} onChange={e => setState(p => ({ ...p, value: e.target.value }))} />\r\n                        ) = {state.result === undefined ? \"<не расчитано>\" : round(state.result, 5)}\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let data = parse(state.text);\r\n                        let array = calculate(data, state.value);\r\n                        let plot = []\r\n                        let it = 0;\r\n                        let dots = data.map(e => Number(e.x)) || [];\r\n\r\n                        // расширяем сегрметы точками,\r\n                        // ибо надо отображать контрольные точки и они должны входить в тот же дата сет\r\n\r\n                        for (let i = 0; i < dots.length - 1; i++) {\r\n                            let step = Math.abs(dots[i] - dots[i + 1]) / 10;\r\n                            let left = dots[i];\r\n                            let right = dots[i + 1];\r\n                            while (left < right + step || it > 10000) {\r\n                                plot.push({ x: left, y: calculate(data, left), visible: dots.indexOf(left) >= 0 });\r\n                                left += step;\r\n                                it++;\r\n                            }\r\n                        }\r\n\r\n                        setState(prev => ({\r\n                            ...prev, result: array, plot: {\r\n                                data: [...plot],\r\n                                step: 100,\r\n                                min: dots[0],\r\n                                max: dots[dots.length - 1],\r\n                                origin: dots\r\n                            }\r\n                        }))\r\n                    }\r\n                    }>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={state.plot.data}\r\n                        margin={{\r\n                            top: 5,\r\n                            right: 30,\r\n                            left: 20,\r\n                            bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis type=\"number\" dataKey=\"x\" domain={[state.plot.min - 5, state.plot.max + 5]} />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line name=\"Итерполянта f(x)\" type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\"\r\n                            dot={<ControlPoint />}\r\n                        />\r\n                    </ComposedChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\nfunction calculate(data, v) {\r\n    try {\r\n\r\n        let y = find(v, data)\r\n        return y;\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\n","\r\n\r\n\r\nfunction Build(data) {\r\n    let x = []\r\n    let y = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        x.push(Number(data[i].x))\r\n        y.push(Number(data[i].y))\r\n    }\r\n\r\n    let splines = [];\r\n\r\n    for (let i = 0; i < x.length; i++) {\r\n        splines.push({ a: null, b: null, c: null, d: null, x: null });\r\n    }\r\n    // var splines = new Array(X.length).fill({a:null,b:null,c:null,d:null,x:null});\r\n    const n = x.length;\r\n    for (let i = 0; i < n; i++) {\r\n        splines[i].x = x[i];\r\n        splines[i].a = y[i];\r\n    }\r\n    splines[0].c = splines[n - 1].c = 0;\r\n\r\n    // Решение СЛАУ относительно коэффициентов сплайнов c[i] методом прогонки для трехдиагональных матриц\r\n    // Вычисление прогоночных коэффициентов - прямой ход метода прогонки\r\n    var alpha = new Array(n - 1).fill(0);\r\n    var beta = new Array(n - 1).fill(0);\r\n    for (let i = 1; i < n - 1; ++i) {\r\n        let hi = x[i] - x[i - 1];\r\n        var hi1 = x[i + 1] - x[i];\r\n        var A = hi;\r\n        var C = 2.0 * (hi + hi1);\r\n        var B = hi1;\r\n        var F = 6.0 * ((y[i + 1] - y[i]) / hi1 - (y[i] - y[i - 1]) / hi);\r\n        var z = (A * alpha[i - 1] + C);\r\n        alpha[i] = -B / z;\r\n        beta[i] = (F - A * beta[i - 1]) / z;\r\n    }\r\n\r\n    // Нахождение решения - обратный ход метода прогонки\r\n    for (let i = n - 2; i > 0; --i) {\r\n        splines[i].c = alpha[i] * splines[i + 1].c + beta[i];\r\n    }\r\n\r\n    // По известным коэффициентам c[i] находим значения b[i] и d[i]\r\n    for (let i = n - 1; i > 0; --i) {\r\n        let hi = x[i] - x[i - 1];\r\n        splines[i].d = (splines[i].c - splines[i - 1].c) / hi;\r\n        splines[i].b = hi * (2.0 * splines[i].c + splines[i - 1].c) / 6.0 + (y[i] - y[i - 1]) / hi;\r\n    }\r\n\r\n    // досчитываем крайний коэффицент\r\n    let hi = x[0] - x[1];\r\n    splines[0].d = (splines[0].c - splines[1].c) / hi;\r\n    splines[0].b = hi * (2.0 * splines[0].c + splines[1].c) / 6.0 + (y[0] - y[1]) / hi;\r\n\r\n\r\n    return splines;\r\n}\r\n\r\nfunction Interpolate(x, splines) {\r\n    if (splines == null) {\r\n        return NaN; // Если сплайны ещё не построены - возвращаем NaN\r\n    }\r\n\r\n    const n = splines.length;\r\n    var s = { a: null, b: null, c: null, d: null, x: null };\r\n\r\n    if (x <= splines[0].x) // Если x меньше точки сетки x[0] - пользуемся первым эл-тов массива\r\n    {\r\n        s = splines[0];\r\n    }\r\n    else if (x >= splines[n - 1].x) // Если x больше точки сетки x[n - 1] - пользуемся последним эл-том массива\r\n    {\r\n        s = splines[n - 1];\r\n    }\r\n    else // Иначе x лежит между граничными точками сетки - производим бинарный поиск нужного эл-та массива\r\n    {\r\n        var i = 0;\r\n        var j = n - 1;\r\n        while (i + 1 < j) {\r\n            var k = i + (j - i) / 2;\r\n            if (x <= splines[k].x) {\r\n                j = k;\r\n            }\r\n            else {\r\n                i = k;\r\n            }\r\n        }\r\n        s = splines[j];\r\n    }\r\n\r\n    var dx = x - s.x;\r\n    // Вычисляем значение сплайна в заданной точке по схеме Горнера\r\n    // тут используется каноническая запись уравнения сплайна\r\n    return s.a + (s.b + (s.c / 2.0 + s.d * dx / 6.0) * dx) * dx;\r\n}\r\n\r\nexport {\r\n    Build, Interpolate\r\n}","import React, { useState } from \"react\";\r\nimport { Build, Interpolate } from \"./../commons/Spline\";\r\nimport { parse } from \"../commons/utils\";\r\nimport ControlPoint from \"../components/ControlPoint\";\r\nimport { LineChart, ComposedChart, Scatter, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nimport { round } from \"../commons/GaussianQuadrature\";\r\nimport Latex from \"react-latex-next\";\r\nconst initial = {\r\n    data: [\r\n        \"-100;4.06\",\r\n        \"-75;6.78\",\r\n        \"-50;9.49\",\r\n        \"-25;16.27\",\r\n        \"0;40.67\",\r\n        \"25;97.62\",\r\n        \"50;146.63\",\r\n        \"75;151.85\",\r\n        \"100;162.7\"\r\n    ],\r\n}\r\n\r\n\r\n\r\nexport default function Ex2() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: [],\r\n        step: 1,\r\n        origin: [],\r\n        eq: \"\",\r\n        plot: {\r\n            min: -100,\r\n            max: 100\r\n        }\r\n    });\r\n\r\n\r\n    return (<>\r\n        <h1>3. Сплайны</h1>\r\n        <h2>Кубический сплайн</h2>\r\n        <div className=\"ex2_container\">\r\n            <div className=\"ex2_container__input\">\r\n                <p>Исходные данные:</p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let r = calculate(state.text, state.step);\r\n                        setState(prev => ({ ...prev, result: [...r.plot], origin: [...r.origin], eq: r.equation }))\r\n                    }}>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex2_container__main\">\r\n                <div style={{ height: \"300px\" }}>\r\n                    <ResponsiveContainer width=\"80%\">\r\n                        <ComposedChart\r\n                            width={500}\r\n                            height={300}\r\n                            data={state.result}\r\n                            margin={{\r\n                                top: 5,\r\n                                right: 30,\r\n                                left: 20,\r\n                                bottom: 5,\r\n                            }}\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis type=\"number\" dataKey=\"x\" domain={[state.plot.min - 5, state.plot.max + 5]} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line name=\"Кубический сплайн S(x)\" type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\"\r\n                                dot={<ControlPoint />}\r\n                            />\r\n                        </ComposedChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n                <div>\r\n                    <Latex>{state.eq}</Latex>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\n\r\n\r\nfunction calculate(text, step) {\r\n    try {\r\n        let data = parse(text);\r\n        let sp = Build(data);\r\n        // крайнее левое и правое пложение сетки\r\n        console.log(sp)\r\n        let left = Number(data[0].x)\r\n        let right = Number(data[data.length - 1].x)\r\n        let dots = data.map(e => Number(e.x));\r\n        let rs = [];\r\n\r\n        while (left < right + 0.1) {\r\n            rs.push({ x: left, y: Interpolate(left, sp), visible: dots.indexOf(left) >= 0 })\r\n            left += step;\r\n        }\r\n\r\n        return {\r\n            origin: [...data],\r\n            plot: [...rs],\r\n            equation: buildEquation(sp)\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction buildEquation(sp) {\r\n    let sign = (x, d) => {\r\n        if (x < 0 || d) {\r\n            return '+' + Math.abs(x);\r\n        } else if (x > 0) {\r\n            return '-' + Math.abs(x);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    let eq = ({ a, b, c, d, x }, x1) => `${round(a, 5)}${sign(round(b, 5), '+')}\\\\left(x${sign(x)}\\\\right)${sign(round(c / 2, 5), '+')}\\\\left(x${sign(x)}\\\\right)^2${sign(round(d / 6, 5), '+')}\\\\left(x${sign(x)}\\\\right)^3,x\\\\in\\\\left[${x},${x1}\\\\right] \\\\\\\\  `;\r\n\r\n    let eqs = \"\"\r\n    for (let i = 0; i < sp.length - 1; i++) {\r\n        eqs += eq(sp[i], sp[i + 1].x)\r\n    }\r\n\r\n    return `$$\r\n    S(x)=\\\\begin{cases} \r\n        ${eqs}\r\n    \\\\end{cases}\r\n    $$`\r\n}","\r\n/**\r\n * Расчет производной по 3 точкам\r\n * Если P(x) - интерполяционный полином по 3 точкам, то P`(x) его производная.\r\n * Используем общую формулу, так как гарантировать что сетка будет равномерной мы не можем\r\n */\r\nfunction derriveInternal(data, i, i0, i1, i2) {\r\n    let x0 = data[i0].x;\r\n    let x1 = data[i1].x;\r\n    let x2 = data[i2].x;\r\n\r\n    let a0 = ((2 * data[i].x - x1 - x2) / ((x0 - x1) * (x0 - x2))) * data[i0].y\r\n    let a1 = ((2 * data[i].x - x0 - x2) / ((x1 - x0) * (x1 - x2))) * data[i1].y\r\n    let a2 = ((2 * data[i].x - x0 - x1) / ((x2 - x0) * (x2 - x1))) * data[i2].y\r\n    return a0 + a1 + a2;\r\n}\r\n\r\n/**\r\n * Расчет производной\r\n * Определяем в зависимости от точки, какие разности применяем\r\n */\r\nfunction derrive(data, i) {\r\n    if (i === 0) {\r\n        // левые разности\r\n        return derriveInternal(data, i, i, i + 1, i + 2);\r\n    } else if (i === data.length - 1) {\r\n        // правые\r\n        return derriveInternal(data, i, i - 2, i - 1, i);\r\n    } else {\r\n        // центральные\r\n        return derriveInternal(data, i, i - 1, i, i + 1)\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    derrive\r\n}","import React, { useState } from \"react\";\r\nimport { derrive } from \"../commons/FiniteDifference\";\r\nimport { find } from \"../commons/DifferenceTable\"\r\nimport ControlPoint from \"../components/ControlPoint\";\r\nimport { round } from \"../commons/utils\";\r\nimport { LineChart, ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nconst initial = {\r\n    data: [\r\n        \"0;0\",\r\n        \"5.01;0.18\",\r\n        \"10.09;1.05\",\r\n        \"13.98;1.73\",\r\n        \"16.62;2.35\",\r\n        \"18.01;2.96\",\r\n        \"22.53;3.76\",\r\n        \"25.33;4.48\",\r\n        \"28.03;5.28\",\r\n        \"30.42;6.12\",\r\n        \"32.06;7.09\",\r\n        \"33.62;8\"\r\n    ],\r\n}\r\n\r\nexport default function Ex3() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: [],\r\n        plot: {\r\n            data: [],\r\n            min: 10,\r\n            max: 90\r\n        }\r\n    });\r\n\r\n\r\n    return (<>\r\n        <h1>3. Численное дифференцирование</h1>\r\n        <h2>Формулы конечных разностей</h2>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let array = calculate(state.text);\r\n\r\n                        // зная табличные значения, интерполируем разностями\r\n                        let dots = array.map(e => Number(e.x));\r\n                        // функция\r\n                        let xy = array.map(e => ({ x: e.x, y: e.y }));\r\n                        // производные\r\n                        let dy = array.map(e => ({ x: e.x, y: e.fx }));\r\n                        let it = 0;\r\n                        let plot = [];\r\n                        for (let i = 0; i < array.length - 1; i++) {\r\n                            let step = Math.abs(array[i].x - array[i + 1].x) / 10;\r\n                            let left = array[i].x;\r\n                            let right = array[i + 1].x;\r\n                            while (left < right + step || it > 10000) {\r\n                                let rl = round(left, 3)\r\n                                plot.push({ x: rl, y: find(rl, xy), fx: find(rl, dy), visible: dots.indexOf(rl) >= 0 });\r\n                                left += step;\r\n                                it++;\r\n                            }\r\n                        }\r\n\r\n\r\n                        setState(prev => ({\r\n                            ...prev, result: [...array], plot: {\r\n                                data: [...plot],\r\n                                min: dots[0],\r\n                                max: dots[dots.length]\r\n                            }\r\n                        }))\r\n                    }\r\n                    }>Расчитать производные!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\" style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n\r\n                <div>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>X</td>\r\n                                <td>Y</td>\r\n                                <td>f`(x)</td>\r\n                            </tr>\r\n                            {\r\n                                state.result.map((e, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>{e.x}</td>\r\n                                            <td>{e.y}</td>\r\n                                            <td>{e.fx}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <ResponsiveContainer width=\"80%\" height=\"50%\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={state.plot.data}\r\n                        margin={{\r\n                            top: 5,\r\n                            right: 30,\r\n                            left: 20,\r\n                            bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis type=\"number\" dataKey=\"x\" domain={[Math.ceil(state.plot.min) - 5, Math.ceil(state.plot.max + 5)]} />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line name=\"f(x)\" type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\"\r\n                            dot={<ControlPoint />}\r\n                        />\r\n                        <Line name=\"f`(x)\" type=\"monotone\" dataKey=\"fx\" stroke=\"#ff7300\"\r\n                            dot={<ControlPoint />}\r\n                        />\r\n                    </ComposedChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\n\r\nfunction calculate(text) {\r\n    const roundTo = (number, digits) => {\r\n        let d = Math.pow(10, digits);\r\n        return Math.round((number + Number.EPSILON) * d) / d\r\n    }\r\n\r\n\r\n    try {\r\n        let data = parsedata(text);\r\n        let rs = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            let fx = derrive(data, i);\r\n            rs.push({ x: data[i].x, y: data[i].y, fx: roundTo(fx, 6) })\r\n        }\r\n        return rs;\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction parsedata(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n\r\n            return { x: Number(val[0]), y: Number(val[1]) }\r\n        })\r\n}\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Parser } from 'expr-eval';\r\nimport * as GQ from \"./../commons/GaussianQuadrature\";\r\nimport 'katex/dist/katex.min.css'\r\nimport Latex from 'react-latex-next'\r\n\r\n\r\nconst parser = new Parser();\r\n\r\nexport default function Ex4() {\r\n    const [data, setData] = useState({\r\n        fn: \"sin(x)\",\r\n        a: \"0\",\r\n        b: \"pi\",\r\n        aeval: 0,\r\n        beval: 0,\r\n        round: 0,\r\n        result: [],\r\n        graph: []\r\n    });\r\n\r\n    let calc = ({ fn, a, b, round }) => {\r\n        try {\r\n            let fnexr = parser.parse(fn);\r\n            let argA = parser.parse(a.toUpperCase());\r\n            let argB = parser.parse(b.toUpperCase());\r\n            let evA = argA.evaluate();\r\n            let evB = argB.evaluate();\r\n            let func = (exr) => (x) => {\r\n                return exr.evaluate({ x: x })\r\n            };\r\n            let temp = [];\r\n            for (let i = 2; i < 8; i++) {\r\n\r\n\r\n\r\n                let raw = GQ.integrate(func(fnexr), evA, evB, i)\r\n                temp.push({ id: i, val: raw });\r\n            }\r\n\r\n            let it = 0;\r\n            let step = (evB - evA) / 100;\r\n            let values = []\r\n            while ((evA <= evB) || it < 10000) {\r\n                values.push({ x: evA, y: fnexr.evaluate({ x: evA }) })\r\n                evA += step;\r\n                it++;\r\n            }\r\n\r\n            setData(prev => ({\r\n                ...prev,\r\n                result: [...temp],\r\n                graph: [...values],\r\n                aeval: evA,\r\n                beval: evB\r\n            }));\r\n        } catch (err) {\r\n            console.log(\"При вычислении случилась ошибка\", err);\r\n            alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>4. Численное интегрирование</h1>\r\n            <h2>Квадратуры Гаусса</h2>\r\n            <div>\r\n                <label>\r\n                    f(x) =\r\n                    <input type='text' value={data.fn} onChange={e => setData(p => ({ ...p, fn: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    a=\r\n                    <input type='text' value={data.a} onChange={e => setData(p => ({ ...p, a: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    b=\r\n                    <input type='text' value={data.b} onChange={e => setData(p => ({ ...p, b: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    Округлять до:\r\n                    <select name=\"select\" onChange={(e) => {\r\n                        let digit = parseInt(e.target.value);\r\n\r\n                        setData(p => ({ ...p, round: digit }));\r\n                    }}\r\n                        value={data.round}>\r\n                        <option value=\"0\">Не округлять</option>\r\n                        <option value=\"2\">2 знаков</option>\r\n                        <option value=\"3\">З знаков</option>\r\n                        <option value=\"5\">5 знаков</option>\r\n                        <option value=\"8\">8 знаков</option>\r\n                    </select>\r\n                </label>\r\n            </div>\r\n\r\n            <button style={{ marginLeft: \"5px\", marginTop: \"20px\" }} onClick={() => calc(data)}>Расчитать!</button>\r\n\r\n            <h3>Результы выполнения:</h3>\r\n            <hr />\r\n            {\r\n                data.result.map(e => {\r\n                    return (\r\n                        <Latex key={e.id}>{`$$ I = ${coefs(data.a, data.b)[0]}\\\\sum_{i=0}^{${e.id}}{w_if\\\\left(${coefs(data.a, data.b)[0]}z_i+${coefs(data.a, data.b)[1]}\\\\right)} =${GQ.round(e.val, parseInt(data.round))} $$ `}</Latex>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nfunction coefs(a, b) {\r\n    let bound = [\r\n        parser.parse(a.toUpperCase()).evaluate(),\r\n        parser.parse(b.toUpperCase()).evaluate()\r\n    ];\r\n    console.log(bound)\r\n    return [\r\n        (bound[1] - bound[0]) / 2,\r\n        (bound[1] + bound[0]) / 2\r\n    ]\r\n}","import React from 'react';\nimport {\n  HashRouter,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Ex1 from './pages/Ex1';\nimport Ex2 from './pages/Ex2';\nimport Ex3 from './pages/Ex3';\nimport Ex4 from './pages/Ex4';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/ex1\">1.Задача 1.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex2\">2.Задача 2.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex3\">3.Задача 3.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex4\">4.Задача 4.3</Link>\n            </li>\n          </ul>\n          <hr />\n        </div>\n        <Routes>\n          <Route path=\"/ex1\" element={<Ex1 />} />\n          <Route path=\"/ex2\" element={<Ex2 />} />\n          <Route path=\"/ex3\" element={<Ex3 />} />\n          <Route path=\"/ex4\" element={<Ex4 />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n}\n\n\n\n\nfunction Home() {\n  return (<></>);\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}