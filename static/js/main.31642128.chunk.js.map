{"version":3,"sources":["commons/DifferenceTable.js","commons/utils.js","components/DataInput.js","components/ControlPoint.js","components/Plotter.js","pages/Ex1.js","commons/Spline.js","pages/Ex2.js","commons/FiniteDifference.js","commons/LagrangeInterpolation.js","pages/Ex3.js","commons/GaussianQuadrature.js","pages/Ex4.js","App.js","reportWebVitals.js","index.js"],"names":["DifferenceTable","data","this","diff","init","n","tmp","i","length","push","factorial","interpolate","x","table","x0","Number","y0","y","index","q","Math","abs","result","getTable","calcQ","val","r","j","parse","text","split","map","e","replace","round","number","digits","d","pow","EPSILON","DataInput","onChange","style","width","height","fontSize","value","ControlPoint","props","cx","cy","payload","visible","fill","transform","Plotter","plot","lineName","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","type","dataKey","domain","min","max","YAxis","Tooltip","Legend","Line","name","stroke","dot","initial","Ex1","useState","join","undefined","step","origin","state","setState","buttonRef","useRef","useEffect","current","click","buildFormula","className","p","target","ref","onClick","array","it","dots","indexOf","prev","error","console","log","alert","buildTable","formula","m","qexr","copy","JSON","stringify","cells","row","ri","col","ci","Interpolate","splines","NaN","s","a","b","c","k","dx","Ex2","eq","sp","alpha","Array","beta","hi","hi1","A","C","B","F","z","Build","rs","equation","buildEquation","err","calculate","sign","x1","eqs","derriveInternal","i0","i1","i2","x2","derrive","center","arr","curr","newdiff","closest","sum","product","lagrange","Ex3","evt","fx","xy","dy","rl","display","flexDirection","ceil","Table","parser","Parser","Ex4","fn","aeval","beval","graph","setData","calc","exr","fnexr","argA","toUpperCase","argB","evA","evaluate","evB","temp","minmax","raw","integrate","id","values","TextInput","label","marginLeft","digit","parseInt","marginTop","first","rnd","coefs","second","third","bound","Home","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31642128.chunk.js","sourcesContent":["export default class DifferenceTable {\r\n    constructor(data) {\r\n        this.diff = [];\r\n        init(this.diff, data, 5);\r\n    }\r\n\r\n    getTable() {\r\n        return this.diff;\r\n    }\r\n}\r\n\r\n/**\r\n * Инициализация таблицы разностей\r\n * @param diff таблица разностей\r\n * @param data исходный массив, по которому вычисляются разности\r\n * @param n определяет глубину расчета разностей\r\n */\r\nfunction init(diff, data, n) {\r\n    // console.log(\"data: \" + data,\"|\", count, \"| length:\", data.length);\r\n    // услровие выхода из рекурсии\r\n    if (n <= 0) {\r\n        return;\r\n    }\r\n\r\n    // расчитываем n-тые разности.\r\n    // записываем их в таблицу\r\n    let tmp = [];\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n        tmp.push(data[i + 1] - data[i]);\r\n    }\r\n    diff.push(tmp);\r\n\r\n    // реккурсивный вызов, считаем разности более высокого порядка\r\n    init(diff, tmp, n - 1);\r\n}\r\n\r\n// чтобы не тратить время на расчет факториала, запишем сразу его значения для некторых его значений\r\nlet factorial = [0, 1, 2, 6, 24, 120];\r\n\r\n/**\r\n * Интерполирует f(x)\r\n */\r\nfunction interpolate(x, data, table) {\r\n    //за х0 принимаем первый узел\r\n    let x0 = Number(data[0].x);\r\n    let y0 = Number(data[0].y);\r\n\r\n    let index = 0;\r\n    while (data[index] < x && index < 100) {\r\n        index++;\r\n    }\r\n\r\n    let h = Math.abs(Number(data[1].x) - Number(data[0].x));\r\n    let q = (x - x0) / h\r\n    let result = y0;\r\n    // далее по формуле интерполяции вперед, рачитываем значение функции\r\n    for (let i = 0; i < 5; i++) {\r\n        result += table.getTable()[i][0] * calcQ(q, i) / factorial[i + 1];\r\n    }\r\n    return result;\r\n}\r\n\r\n// расчет коэфицента к разности\r\n// имеется ввиду последовательность q(q-1)(q-2)...(q -n)\r\nfunction calcQ(val, i) {\r\n    let r = 1;\r\n    for (let j = i; j >= 0; j--) {\r\n        r *= val - j;\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport {\r\n    interpolate\r\n}","function parse(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n\r\n            return { x: val[0], y: val[1] }\r\n        })\r\n}\r\n\r\n\r\n/**\r\n * Округляет число до конректного знака после запятой\r\n * @param {Number} number число\r\n * @param {Number} digits количество знаков после запятой\r\n * @returns \r\n */\r\nfunction round(number, digits) {\r\n    if (digits === 0) {\r\n        return number;\r\n    }\r\n    let d = Math.pow(10, digits);\r\n    return Math.round((number + Number.EPSILON) * d) / d\r\n}\r\n\r\nexport {\r\n    parse,\r\n    round\r\n}","import React from \"react\"\r\n\r\nexport default function DataInput({ text, onChange }) {\r\n    return (\r\n        <textarea\r\n            style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n            value={text}\r\n            onChange={(e) => onChange(e)} />\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\n// кастомная точка на графике, работает по visible=true \r\nconst ControlPoint = (props) => {\r\n    const { cx, cy, /*stroke,*/ payload /*, value*/ } = props;\r\n    if (payload.visible) {\r\n        return (\r\n            <svg x={cx - 4} y={cy - 4} width={8} height={8} fill=\"white\">\r\n                <g transform=\"translate(4 4)\">\r\n                    <circle r=\"4\" fill=\"black\" />\r\n                    <circle r=\"2\" fill=\"white\" />\r\n                </g>\r\n            </svg>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nexport default ControlPoint","import React from \"react\";\r\nimport { ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport ControlPoint from \"./ControlPoint\";\r\n\r\n/**\r\n * Компонент, рисует график функции\r\n */\r\nexport default function Plotter({ plot, lineName }) {\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <ComposedChart\r\n                width={500}\r\n                height={300}\r\n                data={plot.data}\r\n                margin={{\r\n                    top: 5,\r\n                    right: 30,\r\n                    left: 20,\r\n                    bottom: 5,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis type=\"number\" dataKey=\"x\" domain={[plot.min - 5, plot.max + 5]} />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line name={lineName} type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\"\r\n                    dot={<ControlPoint />}\r\n                />\r\n            </ComposedChart>\r\n        </ResponsiveContainer>\r\n    )\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport DifferenceTable, { interpolate } from \"../commons/DifferenceTable\";\r\nimport { parse, round } from \"../commons/utils\";\r\nimport DataInput from \"../components/DataInput\";\r\nimport Plotter from \"../components/Plotter\";\r\nimport Latex from \"react-latex-next\";\r\n\r\n//Данные по умолчанию\r\nconst initial = {\r\n    data: [\r\n        \"10;0.17365\",\r\n        \"20;0.34202\",\r\n        \"30;0.5\",\r\n        \"40;0.64279\",\r\n        \"50;0.76604\",\r\n        \"60;0.86603\"\r\n    ],\r\n    value: 23\r\n}\r\n\r\nexport default function Ex1() {\r\n    //начальное состояние компонента\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: undefined,\r\n        value: initial.value,\r\n        table: [],\r\n        plot: {\r\n            data: [],\r\n            step: 100,\r\n            origin: [],\r\n            min: 0,\r\n            max: 70\r\n        }\r\n    });\r\n\r\n    // Прожимаем кнопку \"расчитать\" автоматически при монтировании компонента,\r\n    // чтобы пользователь сразу видел результы работы\r\n    const buttonRef = useRef();\r\n    useEffect(() => buttonRef.current.click(), []);\r\n\r\n    // рендер страницы\r\n    return (<>\r\n        <h1>1. Интерполяция</h1>\r\n        <h2>Метод разделенных разностей</h2>\r\n        <span>{buildFormula(5)}</span>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <DataInput text={state.text} onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n                <div>\r\n                    <label>\r\n                        f(\r\n                        <input type='text' value={state.value} onChange={e => setState(p => ({ ...p, value: e.target.value }))} />\r\n                        ) = {state.result === undefined ? \"<не расчитано>\" : round(state.result, 5)}\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button ref={buttonRef} onClick={(e) => {\r\n                        try {\r\n                            // при клике по кнопке начинаем расчитывать\r\n                            let data = parse(state.text);\r\n                            let table = new DifferenceTable(data.map(e => e.y));\r\n                            let array = interpolate(state.value, data, table);\r\n                            let plot = []\r\n                            let it = 0;\r\n                            let dots = data.map(e => Number(e.x)) || [];\r\n\r\n                            // расширяем сегрметы точками,\r\n                            // ибо надо отображать контрольные точки и они должны входить в тот же датасет\r\n                            for (let i = 0; i < dots.length - 1; i++) {\r\n                                let step = Math.abs(dots[i] - dots[i + 1]) / 10;\r\n                                let left = dots[i];\r\n                                let right = dots[i + 1];\r\n                                // расчитываем для графика точки\r\n                                // добавим еще условие выхода из цикла если итераций больше 10к\r\n                                while (left < right + step || it > 10000) {\r\n                                    plot.push({ x: left, y: interpolate(left, data, table), visible: dots.indexOf(left) >= 0 });\r\n                                    left += step;\r\n                                    it++;\r\n                                }\r\n                            }\r\n\r\n                            //изменем состояние компонента\r\n                            setState(prev => ({\r\n                                ...prev, result: array,\r\n                                table: table.getTable(),\r\n                                plot: {\r\n                                    data: [...plot],\r\n                                    step: 100,\r\n                                    min: dots[0],\r\n                                    max: dots[dots.length - 1],\r\n                                    origin: dots\r\n                                }\r\n                            }))\r\n                        } catch (error) {\r\n                            console.log(\"При вычислении случилась ошибка\", error);\r\n                            alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n                        }\r\n                    }\r\n                    }>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\">\r\n                <Plotter plot={state.plot} lineName={\"Интерполянт P(x)\"} />\r\n            </div>\r\n        </div>\r\n        {/* вывод таблицы разностей */}\r\n        <div>\r\n            {buildTable(state.table)}\r\n        </div>\r\n    </>)\r\n}\r\n\r\n/**\r\n * Вывод формулы для интерполяции вперед по 5м разностям\r\n */\r\nfunction buildFormula(n) {\r\n    let formula = `$$ P_${n}(x) = y_0 + \\\\Delta y_0q `\r\n\r\n    const q = (m) => {\r\n        let qexr = \"q\";\r\n        for (let i = 1; i < m; i++) {\r\n            qexr += `(q - ${i})`\r\n        }\r\n        return qexr;\r\n    }\r\n\r\n    for (let i = 2; i <= n; i++) {\r\n        formula += `+ \\\\frac{\\\\Delta^${i}y_0${q(i)}}{${i}!}`\r\n    }\r\n\r\n    formula += '$$'\r\n\r\n    return (\r\n        <Latex>{formula}</Latex>\r\n    )\r\n}\r\n\r\n/**\r\n * Вывод таблицы разностей\r\n */\r\nfunction buildTable(table) {\r\n    // deep copy массива\r\n    let copy = JSON.parse(JSON.stringify(table));\r\n\r\n    for (let i = 0; i < copy.length; i++) {\r\n        let cells = 5 - copy[i].length\r\n        for (let j = 0; j < cells; j++) {\r\n            copy[i].push(null);\r\n        }\r\n    }\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {\r\n                    copy.map((row, ri) => {\r\n                        return (\r\n                            <tr key={ri}>\r\n                                <td><Latex>{`$$ \\\\Delta^${ri + 1}y_0 $$`}</Latex></td>\r\n                                {\r\n                                    row.map((col, ci) => {\r\n                                        return (col) ? (\r\n                                            <td key={ci}>{round(Number(col), 5)}</td>\r\n                                        ) : null\r\n                                    })\r\n                                }\r\n                            </tr>)\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\n","\r\n\r\n\r\nfunction Build(data) {\r\n    let x = []\r\n    let y = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        x.push(Number(data[i].x))\r\n        y.push(Number(data[i].y))\r\n    }\r\n\r\n    let splines = [];\r\n\r\n    for (let i = 0; i < x.length; i++) {\r\n        splines.push({ a: null, b: null, c: null, d: null, x: null });\r\n    }\r\n    // var splines = new Array(X.length).fill({a:null,b:null,c:null,d:null,x:null});\r\n    const n = x.length;\r\n    for (let i = 0; i < n; i++) {\r\n        splines[i].x = x[i];\r\n        splines[i].a = y[i];\r\n    }\r\n    splines[0].c = splines[n - 1].c = 0;\r\n\r\n    // Решение СЛАУ относительно коэффициентов сплайнов c[i] методом прогонки для трехдиагональных матриц\r\n    // Вычисление прогоночных коэффициентов - прямой ход метода прогонки\r\n    var alpha = new Array(n - 1).fill(0);\r\n    var beta = new Array(n - 1).fill(0);\r\n    for (let i = 1; i < n - 1; ++i) {\r\n        let hi = x[i] - x[i - 1];\r\n        var hi1 = x[i + 1] - x[i];\r\n        var A = hi;\r\n        var C = 2.0 * (hi + hi1);\r\n        var B = hi1;\r\n        var F = 6.0 * ((y[i + 1] - y[i]) / hi1 - (y[i] - y[i - 1]) / hi);\r\n        var z = (A * alpha[i - 1] + C);\r\n        alpha[i] = -B / z;\r\n        beta[i] = (F - A * beta[i - 1]) / z;\r\n    }\r\n\r\n    // Нахождение решения - обратный ход метода прогонки\r\n    for (let i = n - 2; i > 0; --i) {\r\n        splines[i].c = alpha[i] * splines[i + 1].c + beta[i];\r\n    }\r\n\r\n    // По известным коэффициентам c[i] находим значения b[i] и d[i]\r\n    for (let i = n - 1; i > 0; --i) {\r\n        let hi = x[i] - x[i - 1];\r\n        splines[i].d = (splines[i].c - splines[i - 1].c) / hi;\r\n        splines[i].b = hi * (2.0 * splines[i].c + splines[i - 1].c) / 6.0 + (y[i] - y[i - 1]) / hi;\r\n    }\r\n\r\n    // досчитываем крайний коэффицент\r\n    let hi = x[0] - x[1];\r\n    splines[0].d = (splines[0].c - splines[1].c) / hi;\r\n    splines[0].b = hi * (2.0 * splines[0].c + splines[1].c) / 6.0 + (y[0] - y[1]) / hi;\r\n\r\n\r\n    return splines;\r\n}\r\n\r\nfunction Interpolate(x, splines) {\r\n    if (splines == null) {\r\n        return NaN; // Если сплайны ещё не построены - возвращаем NaN\r\n    }\r\n\r\n    const n = splines.length;\r\n    var s = { a: null, b: null, c: null, d: null, x: null };\r\n\r\n    if (x <= splines[0].x) // Если x меньше точки сетки x[0] - пользуемся первым эл-тов массива\r\n    {\r\n        s = splines[0];\r\n    }\r\n    else if (x >= splines[n - 1].x) // Если x больше точки сетки x[n - 1] - пользуемся последним эл-том массива\r\n    {\r\n        s = splines[n - 1];\r\n    }\r\n    else // Иначе x лежит между граничными точками сетки - производим бинарный поиск нужного эл-та массива\r\n    {\r\n        var i = 0;\r\n        var j = n - 1;\r\n        while (i + 1 < j) {\r\n            var k = i + (j - i) / 2;\r\n            if (x <= splines[k].x) {\r\n                j = k;\r\n            }\r\n            else {\r\n                i = k;\r\n            }\r\n        }\r\n        s = splines[j];\r\n    }\r\n\r\n    var dx = x - s.x;\r\n    // Вычисляем значение сплайна в заданной точке по схеме Горнера\r\n    // тут используется каноническая запись уравнения сплайна\r\n    return s.a + (s.b + (s.c / 2.0 + s.d * dx / 6.0) * dx) * dx;\r\n}\r\n\r\nexport {\r\n    Build, Interpolate\r\n}","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Build, Interpolate } from \"./../commons/Spline\";\r\nimport { parse, round } from \"../commons/utils\";\r\nimport Latex from \"react-latex-next\";\r\nimport Plotter from \"../components/Plotter\";\r\n\r\n// исходные данные задачи\r\nconst initial = {\r\n    data: [\r\n        \"-100;4.06\",\r\n        \"-75;6.78\",\r\n        \"-50;9.49\",\r\n        \"-25;16.27\",\r\n        \"0;40.67\",\r\n        \"25;97.62\",\r\n        \"50;146.63\",\r\n        \"75;151.85\",\r\n        \"100;162.7\"\r\n    ],\r\n}\r\n\r\nexport default function Ex2() {\r\n    // начальные условия\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: [],\r\n        step: 1,\r\n        origin: [],\r\n        eq: \"\",\r\n        plot: {\r\n            data: [],\r\n            min: -100,\r\n            max: 100\r\n        }\r\n    });\r\n\r\n    // Прожимаем кнопку \"расчитать\" автоматически при монтировании компонента,\r\n    // чтобы пользователь сразу видел результы работы\r\n    const buttonRef = useRef();\r\n    useEffect(() => buttonRef.current.click(), [])\r\n\r\n    return (<>\r\n        <h1>3. Сплайны</h1>\r\n        <h2>Кубический сплайн</h2>\r\n        <div className=\"ex2_container\">\r\n            <div className=\"ex2_container__input\">\r\n                <p>Исходные данные:</p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button ref={buttonRef} onClick={(e) => {\r\n                        let r = calculate(state.text, state.step);\r\n                        setState(prev => ({\r\n                            ...prev,\r\n                            plot: { ...prev.plot, data: [...r.plot] },\r\n                            origin: [...r.origin],\r\n                            eq: r.equation\r\n                        }))\r\n                    }}>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex2_container__main\">\r\n                <div style={{ height: \"300px\" }}>\r\n                    <Plotter lineName={\"Кубический сплайн S(x)\"} plot={state.plot} />\r\n                </div>\r\n                <div>\r\n                    <Latex>{state.eq}</Latex>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    </>)\r\n}\r\n\r\n// Касчет сплайна\r\nfunction calculate(text, step) {\r\n    try {\r\n        let data = parse(text);\r\n        let sp = Build(data);\r\n        // крайнее левое и правое пложение сетки\r\n        let left = Number(data[0].x)\r\n        let right = Number(data[data.length - 1].x)\r\n        let dots = data.map(e => Number(e.x));\r\n        let rs = [];\r\n\r\n        while (left < right + 0.1) {\r\n            rs.push({ x: left, y: Interpolate(left, sp), visible: dots.indexOf(left) >= 0 })\r\n            left += step;\r\n        }\r\n\r\n        return {\r\n            origin: [...data],\r\n            plot: [...rs],\r\n            equation: buildEquation(sp)\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n// вывод формулы сплайна\r\nfunction buildEquation(sp) {\r\n    let sign = (x, d) => {\r\n        if (x < 0 || d) {\r\n            return '+' + Math.abs(x);\r\n        } else if (x > 0) {\r\n            return '-' + Math.abs(x);\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    let eq = ({ a, b, c, d, x }, x1) => `${round(a, 5)}${sign(round(b, 5), '+')}\\\\left(x${sign(x)}\\\\right)${sign(round(c / 2, 5), '+')}\\\\left(x${sign(x)}\\\\right)^2${sign(round(d / 6, 5), '+')}\\\\left(x${sign(x)}\\\\right)^3,x\\\\in\\\\left[${x},${x1}\\\\right] \\\\\\\\  `;\r\n\r\n    let eqs = \"\"\r\n    for (let i = 0; i < sp.length - 1; i++) {\r\n        eqs += eq(sp[i], sp[i + 1].x)\r\n    }\r\n\r\n    return `$$\r\n    S(x)=\\\\begin{cases} \r\n        ${eqs}\r\n    \\\\end{cases}\r\n    $$`\r\n}","\r\n/**\r\n * Расчет производной по 3 точкам\r\n * Если P(x) - интерполяционный полином по 3 точкам, то P`(x) его производная.\r\n * Используем общую формулу, так как гарантировать что сетка будет равномерной мы не можем\r\n */\r\nfunction derriveInternal(data, i, i0, i1, i2) {\r\n    let x0 = data[i0].x;\r\n    let x1 = data[i1].x;\r\n    let x2 = data[i2].x;\r\n\r\n    let a0 = ((2 * data[i].x - x1 - x2) / ((x0 - x1) * (x0 - x2))) * data[i0].y\r\n    let a1 = ((2 * data[i].x - x0 - x2) / ((x1 - x0) * (x1 - x2))) * data[i1].y\r\n    let a2 = ((2 * data[i].x - x0 - x1) / ((x2 - x0) * (x2 - x1))) * data[i2].y\r\n    return a0 + a1 + a2;\r\n}\r\n\r\n/**\r\n * Расчет производной\r\n * Определяем в зависимости от точки, какие разности применяем\r\n */\r\nfunction derrive(data, i) {\r\n    if (i === 0) {\r\n        // левые разности\r\n        return derriveInternal(data, i, i, i + 1, i + 2);\r\n    } else if (i === data.length - 1) {\r\n        // правые\r\n        return derriveInternal(data, i, i - 2, i - 1, i);\r\n    } else {\r\n        // центральные\r\n        return derriveInternal(data, i, i - 1, i, i + 1)\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    derrive\r\n}","\r\n/**\r\n * Ищем ближайшую точку среди контрольных точек\r\n */\r\nfunction closest(x, data) {\r\n    let arr = data.map(e => e.x);\r\n    let curr = arr[0], diff = Math.abs(x - curr);\r\n    let index = 0;\r\n    for (let val = 0; val < arr.length; val++) {\r\n        let newdiff = Math.abs(x - arr[val]);\r\n        if (newdiff < diff) {\r\n            diff = newdiff;\r\n            curr = arr[val];\r\n            index = val;\r\n        };\r\n    };\r\n    return index;\r\n\r\n}\r\n\r\nfunction interpolate(x, data) {\r\n    let center = closest(x, data);\r\n    // выделяем узел от которого будем отчитывать узлы из контрольных точек\r\n    if (center === data.length - 1) {\r\n        center = data.length - 3\r\n    } else if (center === 0) {\r\n        center = 1;\r\n    } else {\r\n        center += -1\r\n    }\r\n    return lagrange(x, center, data, 3);\r\n}\r\n\r\n/**\r\n * Интерполяция полиномами лагранжа\r\n */\r\nfunction lagrange(x, center, data, n) {\r\n    let sum = 0;\r\n    for (let i = 0; i < n; i++) {\r\n        let product = 1;\r\n        for (let j = 0; j < n; j++) {\r\n            if (i === j) {\r\n                continue;\r\n            }\r\n            product *= (x - data[j + center].x) / (data[i + center].x - data[j + center].x);\r\n        }\r\n        sum += product * data[i + center].y\r\n    }\r\n    return sum;\r\n}\r\n\r\n\r\nexport {\r\n    interpolate\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { derrive } from \"../commons/FiniteDifference\";\r\nimport ControlPoint from \"../components/ControlPoint\";\r\nimport { round, parse } from \"../commons/utils\";\r\nimport { interpolate } from \"../commons/LagrangeInterpolation\"\r\nimport { ComposedChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport Latex from \"react-latex-next\";\r\n\r\n//исходные данные задачи\r\nconst initial = {\r\n    data: [\r\n        \"0;0\",\r\n        \"5.01;0.18\",\r\n        \"10.09;1.05\",\r\n        \"13.98;1.73\",\r\n        \"16.62;2.35\",\r\n        \"18.01;2.96\",\r\n        \"22.53;3.76\",\r\n        \"25.33;4.48\",\r\n        \"28.03;5.28\",\r\n        \"30.42;6.12\",\r\n        \"32.06;7.09\",\r\n        \"33.62;8\"\r\n    ],\r\n}\r\n\r\nexport default function Ex3() {\r\n    //изначальное состояние\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: [],\r\n        plot: {\r\n            data: [],\r\n            min: 10,\r\n            max: 90\r\n        }\r\n    });\r\n\r\n    // Прожимаем кнопку \"расчитать\" автоматически при монтировании компонента,\r\n    // чтобы пользователь сразу видел результы работы\r\n    const buttonRef = useRef();\r\n    useEffect(() => buttonRef.current.click(), []);\r\n\r\n    return (<>\r\n        <h1>3. Численное дифференцирование</h1>\r\n        <h2>Формулы конечных разностей</h2>\r\n        <Latex>{` Общая формула: $$ {P}'(x)= \\\\frac{2x - x_1 - x_2} {(x_0-x_1)(x_0-x_2)}y_0 + \\\\frac{2x - x_0 - x_2}   {(x_1-x_0)(x_1-x_2)}y_1 + \\\\frac{2x - x_0 - x_1}   {(x_2-x_0)(x_2-x_2)}y_2$$`}</Latex>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button ref={buttonRef} onClick={(evt) => {\r\n                        try {\r\n                            let array = calculate(state.text);\r\n                            // зная табличные значения, интерполируем разностями\r\n                            let dots = array.map(e => Number(e.x));\r\n                            // функция\r\n                            let xy = array.map(e => ({ x: e.x, y: e.y }));\r\n                            // производные\r\n                            let dy = array.map(e => ({ x: e.x, y: e.fx }));\r\n\r\n                            let it = 0;\r\n                            let plot = [];\r\n                            for (let i = 0; i < array.length - 1; i++) {\r\n                                let step = Math.abs(array[i].x - array[i + 1].x) / 5;\r\n                                let left = array[i].x;\r\n                                let right = array[i + 1].x;\r\n                                while (left < right + step || it > 10000) {\r\n                                    let rl = round(left, 3)\r\n                                    plot.push({ x: rl, y: interpolate(rl, xy), fx: interpolate(rl, dy), visible: dots.indexOf(rl) >= 0 });\r\n                                    left += step;\r\n                                    it++;\r\n                                }\r\n                            }\r\n\r\n                            setState(prev => ({\r\n                                ...prev, result: [...array], plot: {\r\n                                    data: [...plot],\r\n                                    min: dots[0],\r\n                                    max: dots[dots.length]\r\n                                }\r\n                            }))\r\n                        } catch (err) {\r\n                            console.log(\"При вычислении случилась ошибка\", err);\r\n                            alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n                        }\r\n                    }\r\n                    }>Расчитать производные!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\" style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                <div>\r\n                    {/* Вывод таблицы с производными */}\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>X</td>\r\n                                <td>Y</td>\r\n                                <td>f`(x)</td>\r\n                            </tr>\r\n                            {\r\n                                state.result.map((e, i) => {\r\n                                    return (\r\n                                        <tr key={i}>\r\n                                            <td>{e.x}</td>\r\n                                            <td>{e.y}</td>\r\n                                            <td>{e.fx}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {/* график */}\r\n                <ResponsiveContainer width=\"80%\" height=\"50%\">\r\n                    <ComposedChart\r\n                        width={500}\r\n                        height={300}\r\n                        data={state.plot.data}\r\n                        margin={{\r\n                            top: 5,\r\n                            right: 30,\r\n                            left: 20,\r\n                            bottom: 5,\r\n                        }}\r\n                    >\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis type=\"number\" dataKey=\"x\" domain={[Math.ceil(state.plot.min) - 5, Math.ceil(state.plot.max + 5)]} />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        {/* оригинальная функция */}\r\n                        <Line name=\"f(x)\" type=\"monotone\" dataKey=\"y\" stroke=\"#8884d8\"\r\n                            dot={<ControlPoint />}\r\n                        />\r\n                        {/* производная функции*/}\r\n                        <Line name=\"f`(x)\" type=\"monotone\" dataKey=\"fx\" stroke=\"#ff7300\"\r\n                            dot={<ControlPoint />}\r\n                        />\r\n                    </ComposedChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\n/**\r\n * Расчет производных\r\n */\r\nfunction calculate(text) {\r\n    let data = parse(text);\r\n    let rs = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n        // находим производную отностительно 3 контрольных точек\r\n        // и записываем в массив\r\n        let fx = derrive(data, i);\r\n        rs.push({ x: data[i].x, y: data[i].y, fx: round(fx, 6) })\r\n    }\r\n    return rs;\r\n}","/**\r\n * Значения коэффицентов и корней для формул Гаусса\r\n */\r\nconst Table = {\r\n    \"2\": [\r\n        [1.0, -0.577350269189626],\r\n        [1.0, 0.577350269189626]\r\n    ],\r\n    \"3\": [\r\n        [0.888888888888889, 0.000000000000000],\r\n        [0.555555555555556, -0.774596669241483],\r\n        [0.555555555555556, 0.774596669241483]\r\n    ],\r\n    \"4\": [\r\n        [0.652145154862546, -0.339981043584856],\r\n        [0.652145154862546, 0.339981043584856],\r\n        [0.347854845137454, -0.861136311594053],\r\n        [0.347854845137454, 0.861136311594053],\r\n    ],\r\n    \"5\": [\r\n        [0.568888888888889, 0.000000000000000],\r\n        [0.478628670499367, -0.538469310105683],\r\n        [0.478628670499367, 0.538469310105683],\r\n        [0.236926885056189, -0.906179845938664],\r\n        [0.236926885056189, 0.906179845938664],\r\n    ],\r\n    \"6\": [\r\n        [0.360761573048139, 0.661209386466264],\r\n        [0.360761573048139, -0.661209386466264],\r\n        [0.467913934572691, -0.238619186083197],\r\n        [0.467913934572691, 0.238619186083197],\r\n        [0.171324492379170, -0.932469514203152],\r\n        [0.171324492379170, 0.932469514203152],\r\n    ],\r\n    \"7\": [\r\n        [0.417959183673469, 0.000000000000000],\r\n        [0.381830050505119, 0.405845151377397],\r\n        [0.381830050505119, -0.405845151377397],\r\n        [0.279705391489277, -0.741531185599394],\r\n        [0.279705391489277, 0.741531185599394],\r\n        [0.129484966168870, -0.949107912342758],\r\n        [0.129484966168870, 0.949107912342758],\r\n    ],\r\n    \"8\": [\r\n        [0.1012285363, 0.9602898565],\r\n        [0.2223810345, 0.7966664774],\r\n        [0.3137066459, 0.5255324099],\r\n        [0.3626837834, 0.1834346425],\r\n        [0.3626837834, -0.1834346425],\r\n        [0.3137066459, -0.5255324099],\r\n        [0.2223810345, -0.7966664774],\r\n        [0.1012285363, -0.9602898565],\r\n\r\n    ],\r\n    \"9\": [\r\n        [0.0812743884, 0.9681602395],\r\n        [0.1806481607, 0.8360311073],\r\n        [0.2606106964, 0.6133714327],\r\n        [0.3123470770, 0.3242534234],\r\n        [0.3302393550, 0.0000000000],\r\n        [0.3123470770, -0.3242534234],\r\n        [0.2606106964, -0.6133714327],\r\n        [0.1806481607, -0.8360311073],\r\n        [0.0812743884, -0.9681602395],\r\n\r\n    ],\r\n    \"10\": [\r\n        [0.0666713443, 0.9739065285],\r\n        [0.1494513492, 0.8650633667],\r\n        [0.2190863625, 0.6794095683],\r\n        [0.2692667193, 0.4333953941],\r\n        [0.2955242247, 0.1488743390],\r\n        [0.2955242247, -0.1488743390],\r\n        [0.2692667193, -0.4333953941],\r\n        [0.2190863625, -0.6794095683],\r\n        [0.1494513492, -0.8650633667],\r\n        [0.0666713443, -0.9739065285],\r\n    ],\r\n\r\n};\r\n/**\r\n * Вычисляет интеграл с помощью квадратур гаусса\r\n * @param {Function} fn функция\r\n * @param {Number} a левая граница\r\n * @param {Number} b правая граница\r\n * @param {Number} n количество точек\r\n * @returns \r\n */\r\nfunction integrate(fn, a, b, n) {\r\n    let result = 0;\r\n    const q = Table[n];\r\n    for (let i = 0; i < n; i++) {\r\n        let w = q[i][0]\r\n        let z = q[i][1]\r\n        result += w * fn(((b - a) * z + b + a) / 2)\r\n    }\r\n    return result * ((b - a) / 2);\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\n    Table,\r\n    integrate\r\n}","\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Parser } from 'expr-eval';\r\nimport { integrate, Table } from \"./../commons/GaussianQuadrature\";\r\nimport 'katex/dist/katex.min.css'\r\nimport Latex from 'react-latex-next'\r\nimport { round as rnd } from \"./../commons/utils\";\r\nconst parser = new Parser();\r\n\r\nexport default function Ex4() {\r\n    // исходное состояние\r\n    const [data, setData] = useState({\r\n        fn: \"sin(x)\",\r\n        a: \"0\",\r\n        b: \"pi\",\r\n        n: 10,\r\n        aeval: 0,\r\n        beval: 0,\r\n        round: 0,\r\n        result: [],\r\n        graph: []\r\n    });\r\n\r\n    // Прожимаем кнопку \"расчитать\" автоматически при монтировании компонента,\r\n    // чтобы пользователь сразу видел результы работы\r\n    const buttonRef = useRef();\r\n    useEffect(() => buttonRef.current.click(), []);\r\n\r\n    // вычисление интеграла\r\n    let calc = ({ fn, a, b, round }) => {\r\n        try {\r\n            let fnexr = parser.parse(fn);\r\n            let argA = parser.parse(a.toUpperCase());\r\n            let argB = parser.parse(b.toUpperCase());\r\n            let evA = argA.evaluate();\r\n            let evB = argB.evaluate();\r\n            let func = (exr) => (x) => {\r\n                return exr.evaluate({ x: x })\r\n            };\r\n            let temp = [];\r\n            let n = minmax(data.n, 2, 10)\r\n            let raw = integrate(func(fnexr), evA, evB, n);\r\n            temp.push({ id: n, val: raw });\r\n\r\n            let it = 0;\r\n            let step = (evB - evA) / 100;\r\n            let values = []\r\n            while ((evA <= evB) || it < 10000) {\r\n                values.push({ x: evA, y: fnexr.evaluate({ x: evA }) })\r\n                evA += step;\r\n                it++;\r\n            }\r\n\r\n            setData(prev => ({\r\n                ...prev,\r\n                result: [...temp],\r\n                graph: [...values],\r\n                aeval: evA,\r\n                beval: evB\r\n            }));\r\n        } catch (err) {\r\n            console.log(\"При вычислении случилась ошибка\", err);\r\n            alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>4. Численное интегрирование</h1>\r\n            <h2>Квадратуры Гаусса</h2>\r\n            <Latex>{'$$ I = \\\\int_{a}^{b}f(x)dx = \\\\sum_{i=0}^{n}w_if(x_i) $$'}</Latex>\r\n            <div>\r\n                <TextInput label={\"f(x)=\"} value={data.fn} onChange={value => setData(prev => ({ ...prev, fn: value }))} />\r\n                <TextInput label={\"a=\"} value={data.a} onChange={value => setData(prev => ({ ...prev, a: value }))} />\r\n                <TextInput label={\"b=\"} value={data.b} onChange={value => setData(prev => ({ ...prev, b: value }))} />\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    Округлять до:\r\n                    <select name=\"select\" onChange={(e) => {\r\n                        let digit = parseInt(e.target.value);\r\n\r\n                        setData(p => ({ ...p, round: digit }));\r\n                    }}\r\n                        value={data.round}>\r\n                        <option value=\"0\">Не округлять</option>\r\n                        <option value=\"2\">2 знаков</option>\r\n                        <option value=\"3\">З знаков</option>\r\n                        <option value=\"5\">5 знаков</option>\r\n                        <option value=\"8\">8 знаков</option>\r\n                    </select>\r\n                </label>\r\n                <TextInput label={\"n=\"} value={data.n} onChange={value => setData(prev => ({ ...prev, n: Number(value) }))} />\r\n            </div>\r\n            <button ref={buttonRef} style={{ marginLeft: \"5px\", marginTop: \"20px\" }} onClick={() => calc(data)}>Расчитать!</button>\r\n            <h3>Результы выполнения:</h3>\r\n            <hr />\r\n            <div>\r\n                <div>\r\n                    {\r\n                        data.result.map(e => {\r\n                            const { a, b, round } = data;\r\n                            let first = rnd(coefs(a, b)[0], round);\r\n                            let second = rnd(coefs(a, b)[0], round);\r\n                            let third = rnd(coefs(data.a, data.b)[1], round);\r\n                            let result = rnd(e.val, round)\r\n                            return (\r\n                                <Latex key={e.id}>{`$$ I = ${first}\\\\sum_{i=0}^{${e.id}}{w_if\\\\left(${second}z_i+${third}\\\\right)} =${result} $$ `}</Latex>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <Latex>{'$$ w_i $$'}</Latex>\r\n                                </td>\r\n                                <td>\r\n                                    <Latex>{'$$ z_i $$'}</Latex>\r\n                                </td>\r\n                            </tr>\r\n                            {/* Выводим корни и коэффиценты */}\r\n                            {\r\n                                Table[minmax(data.n, 2, 10)]\r\n                                    .map((e, i) => {\r\n                                        return (\r\n                                            <tr key={i}>\r\n                                                <td>{e[1]}</td>\r\n                                                <td>{e[0]}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction coefs(a, b) {\r\n    let bound = [\r\n        parser.parse(a.toUpperCase()).evaluate(),\r\n        parser.parse(b.toUpperCase()).evaluate()\r\n    ];\r\n    console.log(bound)\r\n    return [\r\n        (bound[1] - bound[0]) / 2,\r\n        (bound[1] + bound[0]) / 2\r\n    ]\r\n}\r\n\r\nfunction TextInput({ label, value, onChange }) {\r\n    return (\r\n        <label>\r\n            {label}\r\n            <input type='text' value={value} onChange={e => onChange(e.target.value)} />\r\n        </label>\r\n    );\r\n}\r\n\r\nfunction minmax(value, min, max) {\r\n    return Math.min(Math.max(value, min), max);\r\n}","import React from 'react';\nimport {\n  HashRouter,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Ex1 from './pages/Ex1';\nimport Ex2 from './pages/Ex2';\nimport Ex3 from './pages/Ex3';\nimport Ex4 from './pages/Ex4';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/ex1\">1.Задача 1.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex2\">2.Задача 2.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex3\">3.Задача 3.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex4\">4.Задача 4.3</Link>\n            </li>\n          </ul>\n          <hr />\n        </div>\n        <Routes>\n          <Route path=\"/ex1\" element={<Ex1 />} />\n          <Route path=\"/ex2\" element={<Ex2 />} />\n          <Route path=\"/ex3\" element={<Ex3 />} />\n          <Route path=\"/ex4\" element={<Ex4 />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </HashRouter>\n    </div>\n  );\n}\n\nfunction Home() {\n  return (<></>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}