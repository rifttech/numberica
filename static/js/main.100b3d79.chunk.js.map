{"version":3,"sources":["commons/DifferenceTable.js","commons/GaussianQuadrature.js","pages/Ex1.js","commons/Spline.js","pages/Ex2.js","commons/FiniteDifference.js","pages/Ex3.js","pages/Ex4.js","App.js","reportWebVitals.js","index.js"],"names":["DifferenceTable","data","this","diff","init","count","tmp","i","length","push","factorial","calcQ","val","r","j","Table","integrate","fn","a","b","n","result","q","round","number","digits","d","Math","pow","Number","EPSILON","initial","value","Ex1","useState","text","join","undefined","state","setState","className","style","width","height","fontSize","onChange","e","p","target","type","onClick","array","v","split","map","replace","x","y","parsedata","table","x0","y0","abs","getTable","find","err","console","log","alert","calculate","prev","Interpolate","splines","NaN","s","c","k","dx","Ex2","step","sp","alpha","Array","fill","beta","hi","hi1","A","C","B","F","z","Build","left","right","rs","LineChart","margin","top","bottom","XAxis","dataKey","Tooltip","CartesianGrid","stroke","Line","dot","yAxisId","derriveInternal","i0","i1","i2","x1","x2","derrive","Ex3","roundTo","fx","parser","Parser","Ex4","setData","marginLeft","name","digit","parseInt","marginTop","temp","fnexr","parse","argA","toUpperCase","argB","raw","GQ","exr","evaluate","func","id","calc","Home","App","to","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.100b3d79.chunk.js","sourcesContent":["export default class DifferenceTable {\r\n    constructor(data) {\r\n        this.diff = [];\r\n        init(this.diff, data, 5);\r\n    }\r\n\r\n    getTable() {\r\n        return this.diff;\r\n    }\r\n}\r\n\r\n// расчет таблицы разностей\r\nfunction init(diff, data, count) {\r\n    // console.log(\"data: \" + data,\"|\", count, \"| length:\", data.length);\r\n    if (count <= 0) {\r\n        return;\r\n    }\r\n    let tmp = [];\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n        tmp.push(data[i + 1] - data[i]);\r\n    }\r\n    diff.push(tmp);\r\n    init(diff, tmp, count - 1);\r\n}\r\n\r\nlet factorial = [0, 1, 2, 6, 24, 120]\r\n\r\nfunction find(x, data) {\r\n    //инициализируем таблицу разностей\r\n    let table = new DifferenceTable(data.map(e => e.y));\r\n    //за х0 принимаем первый узел\r\n    let x0 = Number(data[0].x);\r\n    let y0 = Number(data[0].y);\r\n    let h = Math.abs(Number(data[1].x) - Number(data[0].x));\r\n    let q = (x - x0) / h\r\n    let result = y0;\r\n    // далее по формуле интерполяции вперед, рачитываем значение функции\r\n    for (let i = 0; i < 5; i++) {\r\n        result += table.getTable()[i][0] * calcQ(q, i) / factorial[i + 1];\r\n    }\r\n    return result;\r\n}\r\n\r\n// расчет коэфицента к разности\r\nfunction calcQ(val, i) {\r\n    let r = 1;\r\n    for (let j = i; j >= 0; j--) {\r\n        r *= val - j;\r\n    }\r\n    return r;\r\n}\r\n\r\n\r\nexport {\r\n    find\r\n}\r\n","/**\r\n * Значения коэффицентов и корней для формул Гаусса\r\n */\r\nconst Table = {\r\n    \"2\": [\r\n        [1.0, -0.577350269189626],\r\n        [1.0, 0.577350269189626]\r\n    ],\r\n    \"3\": [\r\n        [0.888888888888889, 0.000000000000000],\r\n        [0.555555555555556, -0.774596669241483],\r\n        [0.555555555555556, 0.774596669241483]\r\n    ],\r\n    \"4\": [\r\n        [0.652145154862546, -0.339981043584856],\r\n        [0.652145154862546, 0.339981043584856],\r\n        [0.347854845137454, -0.861136311594053],\r\n        [0.347854845137454, 0.861136311594053],\r\n    ],\r\n    \"5\": [\r\n        [0.568888888888889, 0.000000000000000],\r\n        [0.478628670499367, -0.538469310105683],\r\n        [0.478628670499367, 0.538469310105683],\r\n        [0.236926885056189, -0.906179845938664],\r\n        [0.236926885056189, 0.906179845938664],\r\n    ],\r\n    \"6\": [\r\n        [0.360761573048139, 0.661209386466264],\r\n        [0.360761573048139, -0.661209386466264],\r\n        [0.467913934572691, -0.238619186083197],\r\n        [0.467913934572691, 0.238619186083197],\r\n        [0.171324492379170, -0.932469514203152],\r\n        [0.171324492379170, 0.932469514203152],\r\n    ],\r\n    \"7\": [\r\n        [0.417959183673469, 0.000000000000000],\r\n        [0.381830050505119, 0.405845151377397],\r\n        [0.381830050505119, -0.405845151377397],\r\n        [0.279705391489277, -0.741531185599394],\r\n        [0.279705391489277, 0.741531185599394],\r\n        [0.129484966168870, -0.949107912342758],\r\n        [0.129484966168870, 0.949107912342758],\r\n    ]\r\n\r\n\r\n};\r\n/**\r\n * Вычисляет интеграл с помощью квадратур гаусса\r\n * @param {Function} fn функция\r\n * @param {Number} a левая граница\r\n * @param {Number} b правая граница\r\n * @param {Number} n количество точек\r\n * @returns \r\n */\r\nfunction integrate(fn, a, b, n) {\r\n    let result = 0;\r\n    const q = Table[n];\r\n    for (let i = 0; i < n; i++) {\r\n        let w = q[i][0]\r\n        let z = q[i][1]\r\n        result += w * fn(((b - a) * z + b + a) / 2)\r\n    }\r\n    return result * ((b - a) / 2);\r\n}\r\n\r\n/**\r\n * Округляет число до конректного знака после запятой\r\n * @param {Number} number число\r\n * @param {Number} digits количество знаков после запятой\r\n * @returns \r\n */\r\nfunction round(number, digits) {\r\n    if (digits === 0) {\r\n        return number;\r\n    }\r\n    let d = Math.pow(10, digits);\r\n    return Math.round((number + Number.EPSILON) * d) / d\r\n}\r\n\r\n\r\nexport {\r\n    Table,\r\n    integrate,\r\n    round,\r\n}","import React, { useState } from \"react\";\r\nimport { find } from \"../commons/DifferenceTable\";\r\nimport { round } from \"../commons/GaussianQuadrature\"\r\nconst initial = {\r\n    data: [\r\n        \"10;0.17365\",\r\n        \"20;0.34202\",\r\n        \"30;0.5\",\r\n        \"40;0.64279\",\r\n        \"50;0.76604\",\r\n        \"60;0.86603\"\r\n    ],\r\n    value: 23\r\n}\r\n\r\nexport default function Ex1() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: undefined,\r\n        value: 23\r\n    });\r\n\r\n    return (<>\r\n        <h1>1. Интерполяция</h1>\r\n        <h2>Метод разделенных разностей</h2>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n                <div>\r\n                    <label>\r\n                        f(\r\n                        <input type='text' value={state.value} onChange={e => setState(p => ({ ...p, value: e.target.value }))} />\r\n                        ) = {state.result === undefined ? \"<не расчитано>\" : round(state.result, 5)}\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let array = calculate(state.text, state.value);\r\n                        setState(prev => ({ ...prev, result: array }))\r\n                    }\r\n                    }>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\">\r\n\r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\nfunction calculate(text, v) {\r\n\r\n    try {\r\n        let data = parsedata(text);\r\n        let y = find(v, data)\r\n        return y;\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction parsedata(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n\r\n            return { x: val[0], y: val[1] }\r\n        })\r\n}\r\n","\r\n\r\n\r\nfunction Build(data) {\r\n    let x = []\r\n    let y = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        x.push(Number(data[i].x))\r\n        y.push(Number(data[i].y))\r\n    }\r\n\r\n    let splines = [];\r\n\r\n    for (let i = 0; i < x.length; i++) {\r\n        splines.push({ a: null, b: null, c: null, d: null, x: null });\r\n    }\r\n    // var splines = new Array(X.length).fill({a:null,b:null,c:null,d:null,x:null});\r\n    const n = x.length;\r\n    for (let i = 0; i < n; i++) {\r\n        splines[i].x = x[i];\r\n        splines[i].a = y[i];\r\n    }\r\n    splines[0].c = splines[n - 1].c = 0;\r\n\r\n    // Решение СЛАУ относительно коэффициентов сплайнов c[i] методом прогонки для трехдиагональных матриц\r\n    // Вычисление прогоночных коэффициентов - прямой ход метода прогонки\r\n    var alpha = new Array(n - 1).fill(0);\r\n    var beta = new Array(n - 1).fill(0);\r\n    for (let i = 1; i < n - 1; ++i) {\r\n        let hi = x[i] - x[i - 1];\r\n        var hi1 = x[i + 1] - x[i];\r\n        var A = hi;\r\n        var C = 2.0 * (hi + hi1);\r\n        var B = hi1;\r\n        var F = 6.0 * ((y[i + 1] - y[i]) / hi1 - (y[i] - y[i - 1]) / hi);\r\n        var z = (A * alpha[i - 1] + C);\r\n        alpha[i] = -B / z;\r\n        beta[i] = (F - A * beta[i - 1]) / z;\r\n    }\r\n\r\n    // Нахождение решения - обратный ход метода прогонки\r\n    for (let i = n - 2; i > 0; --i) {\r\n        splines[i].c = alpha[i] * splines[i + 1].c + beta[i];\r\n    }\r\n\r\n    // По известным коэффициентам c[i] находим значения b[i] и d[i]\r\n    for (let i = n - 1; i > 0; --i) {\r\n        let hi = x[i] - x[i - 1];\r\n        splines[i].d = (splines[i].c - splines[i - 1].c) / hi;\r\n        splines[i].b = hi * (2.0 * splines[i].c + splines[i - 1].c) / 6.0 + (y[i] - y[i - 1]) / hi;\r\n    }\r\n\r\n    return splines;\r\n}\r\n\r\nfunction Interpolate(x, splines) {\r\n    if (splines == null) {\r\n        return NaN; // Если сплайны ещё не построены - возвращаем NaN\r\n    }\r\n\r\n    const n = splines.length;\r\n    var s = { a: null, b: null, c: null, d: null, x: null };\r\n\r\n    if (x <= splines[0].x) // Если x меньше точки сетки x[0] - пользуемся первым эл-тов массива\r\n    {\r\n        s = splines[0];\r\n    }\r\n    else if (x >= splines[n - 1].x) // Если x больше точки сетки x[n - 1] - пользуемся последним эл-том массива\r\n    {\r\n        s = splines[n - 1];\r\n    }\r\n    else // Иначе x лежит между граничными точками сетки - производим бинарный поиск нужного эл-та массива\r\n    {\r\n        var i = 0;\r\n        var j = n - 1;\r\n        while (i + 1 < j) {\r\n            var k = i + (j - i) / 2;\r\n            if (x <= splines[k].x) {\r\n                j = k;\r\n            }\r\n            else {\r\n                i = k;\r\n            }\r\n        }\r\n        s = splines[j];\r\n    }\r\n\r\n    var dx = x - s.x;\r\n    // Вычисляем значение сплайна в заданной точке по схеме Горнера\r\n    return s.a + (s.b + (s.c / 2.0 + s.d * dx / 6.0) * dx) * dx;\r\n}\r\n\r\nexport {\r\n    Build, Interpolate\r\n}","import React, { useState } from \"react\";\r\nimport { Build, Interpolate } from \"./../commons/Spline\";\r\nimport {\r\n    ResponsiveContainer, LineChart, Line, XAxis, YAxis, ReferenceLine, ReferenceArea,\r\n    ReferenceDot, Tooltip, CartesianGrid, Legend, Brush, ErrorBar, AreaChart, Area,\r\n    Label, LabelList, Scatter, ScatterChart\r\n} from 'recharts'\r\nconst initial = {\r\n    data: [\r\n        \"-100;4.06\",\r\n        \"-75;6.78\",\r\n        \"-50;9.49\",\r\n        \"-25;16.27\",\r\n        \"0;40.67\",\r\n        \"25;97.62\",\r\n        \"50;146.63\",\r\n        \"75;151.85\",\r\n        \"100;162.7\"\r\n    ],\r\n}\r\n\r\n\r\n\r\nexport default function Ex2() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: [],\r\n        step: 10,\r\n    });\r\n\r\n\r\n    return (<>\r\n        <h1>3. Сплайны</h1>\r\n        <h2>Кубический сплайн</h2>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let array = calculate(state.text, state.step);\r\n                        setState(prev => ({ ...prev, result: [...array] }))\r\n                    }\r\n                    }>Расчитать!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\">\r\n                <LineChart\r\n                    width={800}\r\n                    height={600}\r\n                    data={state.result}\r\n                    margin={{ top: 5, right: 20, left: 10, bottom: 5 }}\r\n                >\r\n                    <XAxis dataKey=\"x\" />\r\n                    <Tooltip />\r\n                    <CartesianGrid stroke=\"#f5f5f5\" />\r\n\r\n                    <Line dot={false} type=\"monotone\" dataKey=\"y\" stroke=\"#387908\" yAxisId={1} />\r\n                </LineChart>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\n\r\n\r\nfunction calculate(text, step) {\r\n    try {\r\n        let data = parsedata(text);\r\n\r\n        let sp = Build(data);\r\n        // крайнее левое и правое пложение сетки\r\n\r\n        let left = Number(data[0].x)\r\n        let right = Number(data[data.length - 1].x)\r\n\r\n        let rs = [];\r\n\r\n        while (left < right + 0.1) {\r\n            rs.push({ x: left, y: Interpolate(left, sp) })\r\n            left += step;\r\n        }\r\n\r\n        return rs;\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction parsedata(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n            return { x: val[0], y: val[1] }\r\n        })\r\n}\r\n","function derriveInternal(data, i, i0, i1, i2) {\r\n    let x0 = data[i0].x;\r\n    let x1 = data[i1].x;\r\n    let x2 = data[i2].x;\r\n\r\n    let a0 = ((2 * data[i].x - x1 - x2) / ((x0 - x1) * (x0 - x2))) * data[i0].y\r\n    let a1 = ((2 * data[i].x - x0 - x2) / ((x1 - x0) * (x1 - x2))) * data[i1].y\r\n    let a2 = ((2 * data[i].x - x0 - x1) / ((x2 - x0) * (x2 - x1))) * data[i2].y\r\n    return a0 + a1 + a2;\r\n}\r\n\r\nfunction derrive(data, i) {\r\n    if (i === 0) {\r\n        // левые разности\r\n        return derriveInternal(data, i, i, i + 1, i + 2);\r\n    } else if (i === data.length - 1) {\r\n        // правые\r\n        return derriveInternal(data, i, i - 2, i - 1, i);\r\n    } else {\r\n        // центральные\r\n        return derriveInternal(data, i, i - 1, i, i + 1)\r\n    }\r\n}\r\n\r\n\r\nexport {\r\n    derrive\r\n}","import React, { useState } from \"react\";\r\nimport { derrive } from \"../commons/FiniteDifference\";\r\nconst initial = {\r\n    data: [\r\n        \"0;0\",\r\n        \"5.01;0.18\",\r\n        \"10.09;1.05\",\r\n        \"13.98;1.73\",\r\n        \"16.62;2.35\",\r\n        \"18.01;2.96\",\r\n        \"22.53;3.76\",\r\n        \"25.33;4.48\",\r\n        \"28.03;5.28\",\r\n        \"30.42;6.12\",\r\n        \"32.06;7.09\",\r\n        \"33.62;8\"\r\n    ],\r\n}\r\n\r\n\r\n\r\nexport default function Ex3() {\r\n    const [state, setState] = useState({\r\n        text: initial.data.join(\"\\n\"),\r\n        result: []\r\n    });\r\n\r\n\r\n    return (<>\r\n        <h1>3. Численное дифференцирование</h1>\r\n        <h2>Формулы конечных разностей</h2>\r\n        <div className=\"ex3_container\">\r\n            <div className=\"ex3_container__input\">\r\n                <p>\r\n                    Исходные данные:\r\n                </p>\r\n                <textarea\r\n                    style={{ width: \"200px\", height: \"300px\", fontSize: \"20px\" }}\r\n                    value={state.text}\r\n                    onChange={(e) => setState(p => ({ ...p, text: e.target.value }))} />\r\n\r\n                <div>\r\n                    <button onClick={(e) => {\r\n                        let array = calculate(state.text);\r\n                        setState(prev => ({ ...prev, result: [...array] }))\r\n                    }\r\n                    }>Расчитать производные!</button>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"ex3_container__main\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>X</td>\r\n                            <td>Y</td>\r\n                            <td>f`(x)</td>\r\n                        </tr>\r\n\r\n                        {\r\n                            state.result.map((e, i) => {\r\n                                return (\r\n                                    <tr key={i}>\r\n                                        <td>{e.x}</td>\r\n                                        <td>{e.y}</td>\r\n                                        <td>{e.fx}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </>)\r\n\r\n}\r\n\r\n\r\nfunction calculate(text) {\r\n    const roundTo = (number, digits) => {\r\n        let d = Math.pow(10, digits);\r\n        return Math.round((number + Number.EPSILON) * d) / d\r\n    }\r\n\r\n\r\n    try {\r\n        let data = parsedata(text);\r\n        let rs = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            let fx = derrive(data, i);\r\n            rs.push({ x: data[i].x, y: data[i].y, fx: roundTo(fx, 6) })\r\n        }\r\n        return rs;\r\n    } catch (err) {\r\n        console.log(\"При вычислении случилась ошибка\", err);\r\n        alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction parsedata(text) {\r\n    return text.split(\"\\n\")\r\n        .map(e => {\r\n            let str = e.replace(/\\s/g, '');\r\n            let val = str.split(\";\");\r\n\r\n            return { x: val[0], y: val[1] }\r\n        })\r\n}\r\n","\r\nimport React, { useState } from 'react';\r\nimport { Parser } from 'expr-eval';\r\nimport * as GQ from \"./../commons/GaussianQuadrature\";\r\n\r\n\r\n\r\n\r\nconst parser = new Parser();\r\n\r\nexport default function Ex4() {\r\n    const [data, setData] = useState({\r\n        fn: \"sin(x)\",\r\n        a: \"0\",\r\n        b: \"pi\",\r\n        round: 0,\r\n        result: [],\r\n    });\r\n\r\n    let calc = ({ fn, a, b, round }) => {\r\n        try {\r\n            let temp = [];\r\n            for (let i = 2; i < 8; i++) {\r\n\r\n                let fnexr = parser.parse(fn);\r\n                let argA = parser.parse(a.toUpperCase());\r\n                let argB = parser.parse(b.toUpperCase());\r\n\r\n                let func = (exr) => (x) => {\r\n                    return exr.evaluate({ x: x })\r\n                };\r\n\r\n\r\n                let raw = GQ.integrate(func(fnexr), argA.evaluate(), argB.evaluate(), i)\r\n\r\n\r\n\r\n                temp.push({ id: i, val: raw });\r\n            }\r\n            setData(prev => ({ ...prev, result: [...temp] }));\r\n        } catch (err) {\r\n            console.log(\"При вычислении случилась ошибка\", err);\r\n            alert(\"Увы, что-то пошло нетак! Попробуй еще раз.\")\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>4. Численное интегрирование</h1>\r\n            <h2>Квадратуры Гаусса</h2>\r\n            <div>\r\n                <label>\r\n                    f(x) =\r\n                    <input type='text' value={data.fn} onChange={e => setData(p => ({ ...p, fn: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    a=\r\n                    <input type='text' value={data.a} onChange={e => setData(p => ({ ...p, a: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    b=\r\n                    <input type='text' value={data.b} onChange={e => setData(p => ({ ...p, b: e.target.value }))} />\r\n                </label>\r\n                <label style={{ marginLeft: \"10px\" }}>\r\n                    Округлять до:\r\n                    <select name=\"select\" onChange={(e) => {\r\n                        let digit = parseInt(e.target.value);\r\n\r\n                        setData(p => ({ ...p, round: digit }));\r\n                    }}\r\n                        value={data.round}>\r\n                        <option value=\"0\">Не округлять</option>\r\n                        <option value=\"2\">2 знаков</option>\r\n                        <option value=\"3\">З знаков</option>\r\n                        <option value=\"5\">5 знаков</option>\r\n                        <option value=\"8\">8 знаков</option>\r\n                    </select>\r\n                </label>\r\n            </div>\r\n\r\n            <button style={{ marginLeft: \"5px\", marginTop: \"20px\" }} onClick={() => calc(data)}>Расчитать!</button>\r\n\r\n            <h3>Результы выполнения:</h3>\r\n            <hr />\r\n            {\r\n                data.result.map(e => {\r\n                    return (\r\n                        <p style={{ marginLeft: \"10px\" }} key={e.id}> I = {GQ.round(e.val, parseInt(data.round))} , при n={e.id}</p>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Ex1 from './pages/Ex1';\nimport Ex2 from './pages/Ex2';\nimport Ex3 from './pages/Ex3';\nimport Ex4 from './pages/Ex4';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/ex1\">1.Задача 1.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex2\">2.Задача 2.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex3\">3.Задача 3.2</Link>\n            </li>\n            <li>\n              <Link to=\"/ex4\">4.Задача 4.3</Link>\n            </li>\n          </ul>\n          <hr />\n        </div>\n        <Routes>\n          <Route path=\"/ex1\" element={<Ex1 />} />\n          <Route path=\"/ex2\" element={<Ex2 />} />\n          <Route path=\"/ex3\" element={<Ex3 />} />\n          <Route path=\"/ex4\" element={<Ex4 />} />\n          <Route path=\"/\" element={<Home />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\n\n\n\nfunction Home() {\n  return (<></>);\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}